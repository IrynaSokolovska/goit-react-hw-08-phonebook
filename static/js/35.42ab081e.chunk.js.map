{"version":3,"file":"static/js/35.42ab081e.chunk.js","mappings":"oOAKaA,EAAiB,SAAAC,GAAK,OAAIA,EAAMC,SAASC,KAAnB,EAEtBC,EAAkB,SAAAH,GAAK,OAAIA,EAAMC,SAASG,SAAnB,EAIvBC,EAAe,SAAAL,GAAK,OAAIA,EAAMM,MAAV,E,SCNpBC,EAAmB,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAC3BC,GAAWC,EAAAA,EAAAA,MAIjB,OACE,2BACE,yBACGF,EAAQG,KAAK,KAAGH,EAAQI,UAE3B,mBACEC,KAAK,SACLC,QAAS,WACPL,GAA6BD,EAAQO,GAVXN,GAASO,EAAAA,EAAAA,IAAcR,EAAQO,MAW1D,EAJH,SAKC,aAKN,E,mBCvBYE,EAAOC,EAAAA,GAAAA,GAAH,qGC6DjB,EA9B2B,WACzB,IAAMjB,GAAWkB,EAAAA,EAAAA,IAAYpB,GAEvBO,GAASa,EAAAA,EAAAA,IAAYd,GAErBe,GAAkBC,EAAAA,EAAAA,UAAQ,WAC9B,OAAOpB,EAASK,QAAO,SAAAE,GACrB,OAAOA,EAAQG,KAAKW,cAAcC,SAA3B,OAAoCjB,QAApC,IAAoCA,OAApC,EAAoCA,EAAQgB,cACpD,GACF,GAAE,CAACrB,EAAUK,IAEd,OACE,SAACW,EAAD,UACGG,EAAgBI,KAAI,SAAAhB,GAAO,OAC1B,SAACD,EAAD,CAAmCC,QAASA,GAArBA,EAAQO,GADL,KAKjC,E,oBCjDYU,EAAcP,EAAAA,GAAAA,KAAH,2JAUXQ,EAAYR,EAAAA,GAAAA,MAAH,gLC0HtB,EA7D8B,WAC5B,IAAMT,GAAWC,EAAAA,EAAAA,MAEjB,GAAwBiB,EAAAA,EAAAA,UAAS,IAAjC,eAAOhB,EAAP,KAAaiB,EAAb,KACA,GAA0BD,EAAAA,EAAAA,UAAS,IAAnC,eAAOf,EAAP,KAAciB,EAAd,KAEMC,EAAe,SAAAC,GACK,SAApBA,EAAIC,OAAOrB,KAIfkB,EAASE,EAAIE,cAAcC,OAHzBN,EAAQG,EAAIE,cAAcC,MAI7B,EAED,OACE,UAACT,EAAD,CACEU,SAAU,SAAAJ,GACRA,EAAIK,iBACJ3B,GAAS4B,EAAAA,EAAAA,IAAW,CAAE1B,KAAAA,EAAMC,MAAAA,KAC5BgB,EAAQ,IACRC,EAAS,GACV,EANH,WAQE,UAACH,EAAD,WAAW,QAET,kBACEX,GAAG,OACHuB,SAAUR,EACVjB,KAAK,OACLF,KAAK,OACLuB,MAAOvB,EACP4B,QAAQ,yHACRC,MAAM,yIACNC,UAAQ,QAIZ,UAACf,EAAD,WAAW,UAET,kBACEX,GAAG,QACHuB,SAAUR,EACVjB,KAAK,MACLF,KAAK,QACLuB,MAAOtB,EACP2B,QAAQ,yFACRC,MAAM,+FACNC,UAAQ,QAIZ,SAACC,EAAA,EAAD,CAAQ7B,KAAK,SAAS8B,QAAQ,WAA9B,SAAyC,kBAK9C,ECxHc,SAASC,IACtB,IAAMnC,GAAWC,EAAAA,EAAAA,MACXN,GAAYe,EAAAA,EAAAA,IAAYhB,GAM9B,OAJA0C,EAAAA,EAAAA,YAAU,WACRpC,GAASqC,EAAAA,EAAAA,MACV,GAAE,CAACrC,KAGF,iCACE,SAACsC,EAAA,EAAD,WACE,2BAAO,qBAET,SAAC,EAAD,KACA,yBAAM3C,GAAa,4BACnB,SAAC,EAAD,MAGL,C","sources":["redux/selectors.js","components/ContactList/ContactListItems.jsx","components/ContactList/ContactList.styled.jsx","components/ContactList/ContactList.jsx","components/AddContactForm/AddContactFormstyled.jsx","components/AddContactForm/AddContactForm.jsx","pages/Contacts.js"],"sourcesContent":["// export const getContacts = state => state.contacts.list;\n\n// export const getFilter = state => state.filter;\n// import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.items;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n\nexport const selectFilter = state => state.filter;\n\n// export const selectFilteredContacts = createSelector(\n//   [selectContacts, selectFilter],\n//   (contacts, filter) => {\n//     return contacts.filter(contact =>\n//       contact.name.toLowerCase().includes(filter.toLowerCase())\n//     );\n//   }\n// );\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/operations';\n\nexport const ContactListItems = ({ contact }) => {\n  const dispatch = useDispatch();\n\n  const handleDeleteContact = () => dispatch(deleteContact(contact.id));\n\n  return (\n    <li>\n      <p>\n        {contact.name}: {contact.phone}\n      </p>\n      <button\n        type=\"button\"\n        onClick={() => {\n          dispatch(handleDeleteContact(contact.id));\n        }}\n      >\n        Delete\n      </button>\n    </li>\n  );\n};\n\nContactListItems.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string,\n      number: PropTypes.string,\n    })\n  ),\n  onDeleteContact: PropTypes.func,\n};\nexport default ContactListItems;\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  column-gap: 20px;\n  row-gap: 40px;\n`;\n","import React, { useMemo } from 'react';\nimport { ContactListItems } from './ContactListItems';\nimport PropTypes from 'prop-types';\nimport { List } from './ContactList.styled';\n\nimport { useSelector } from 'react-redux';\n// import { selectFilteredContacts } from 'redux/selectors';\nimport { selectContacts, selectFilter } from 'redux/selectors';\n\n// export const ContactList = () => {\n//   const contacts = useSelector(selectFilteredContacts);\n\n//   return (\n//     <List>\n//       {contacts.map(contact => (\n//         <ContactListItems key={contact.id} contact={contact} />\n//       ))}\n//     </List>\n//   );\n// };\n\n// ContactList.propTypes = {\n//   contacts: PropTypes.arrayOf(\n//     PropTypes.shape({\n//       id: PropTypes.string,\n//       name: PropTypes.string,\n//       number: PropTypes.string,\n//     })\n//   ),\n//   onDeleteContact: PropTypes.func,\n// };\n// export default ContactList;\n// -------------------------------\nexport const ContactList = () => {\n  const contacts = useSelector(selectContacts);\n\n  const filter = useSelector(selectFilter);\n\n  const visibleContacts = useMemo(() => {\n    return contacts.filter(contact => {\n      return contact.name.toLowerCase().includes(filter?.toLowerCase());\n    });\n  }, [contacts, filter]);\n\n  return (\n    <List>\n      {visibleContacts.map(contact => (\n        <ContactListItems key={contact.id} contact={contact} />\n      ))}\n    </List>\n  );\n};\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string,\n      name: PropTypes.string,\n      number: PropTypes.string,\n    })\n  ),\n  onDeleteContact: PropTypes.func,\n};\nexport default ContactList;\n","import styled from 'styled-components';\n\nexport const ContactForm = styled.form`\n  display: flex;\n  flex-flow: column;\n  padding: 20px;\n  margin: 0 auto;\n  border-radius: 4px;\n  gap: 16px;\n  width: 400px;\n`;\n\nexport const LabelForm = styled.label`\n  margin: 0;\n  margin-bottom: 16px;\n  font-size: 14px;\n  font-style: normal;\n  font-weight: 700;\n  line-height: 1.33;\n  letter-spacing: -0.18px;\n`;\n","import { Button } from '@mui/material';\nimport { PropTypes } from 'prop-types';\nimport { useState } from 'react';\n\nimport { ContactForm, LabelForm } from './AddContactFormstyled';\nimport { useDispatch } from 'react-redux';\n// import { addContact } from 'redux/contactsSlice';\nimport { addContact } from 'redux/operations';\n// import { selectContacts } from 'redux/selectors';\n\n// export const AddContactForm = () => {\n//   const dispatch = useDispatch();\n\n//   const handleSubmit = evt => {\n//     evt.preventDefault();\n//     const form = evt.target;\n//     dispatch(addContact(evt.target.elements.contact.value));\n//     form.reset();\n//   };\n//   const contacts = useSelector(selectContacts);\n\n//   const [name, setName] = useState('');\n//   const [number, setNumber] = useState('');\n\n//   const handleChange = evt => {\n//     if (evt.target.name === 'name') {\n//       selectContacts(evt.currentTarget.value);\n//       return;\n//     }\n//     setNumber(evt.currentTarget.value);\n//   };\n\n//   return (\n//     <ContactForm onSubmit={handleSubmit}>\n//       <LabelForm>\n//         Name\n//         <input\n//           id=\"name\"\n//           type=\"text\"\n//           name=\"name\"\n//           value={name}\n//           pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n//           title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n//           required\n//         />\n//       </LabelForm>\n\n//       <LabelForm>\n//         Number\n//         <input\n//           id=\"number\"\n//           type=\"tel\"\n//           name=\"number\"\n//           value={number}\n//           pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n//           title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n//           required\n//         />\n//       </LabelForm>\n\n//       <Button type=\"submit\" variant=\"outlined\">\n//         Add contact\n//       </Button>\n//     </ContactForm>\n//   );\n// };\n\n// AddContactForm.propTypes = {\n//   onSubmit: PropTypes.func,\n// };\n// export default AddContactForm;\n\n// // --------------------------------------------------\nexport const AddContactForm = () => {\n  const dispatch = useDispatch();\n\n  const [name, setName] = useState('');\n  const [phone, setPhone] = useState('');\n\n  const handleChange = evt => {\n    if (evt.target.name === 'name') {\n      setName(evt.currentTarget.value);\n      return;\n    }\n    setPhone(evt.currentTarget.value);\n  };\n\n  return (\n    <ContactForm\n      onSubmit={evt => {\n        evt.preventDefault();\n        dispatch(addContact({ name, phone }));\n        setName('');\n        setPhone('');\n      }}\n    >\n      <LabelForm>\n        Name\n        <input\n          id=\"name\"\n          onChange={handleChange}\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n      </LabelForm>\n\n      <LabelForm>\n        Number\n        <input\n          id=\"phone\"\n          onChange={handleChange}\n          type=\"tel\"\n          name=\"phone\"\n          value={phone}\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n        />\n      </LabelForm>\n\n      <Button type=\"submit\" variant=\"outlined\">\n        Add contact\n      </Button>\n    </ContactForm>\n  );\n};\n\nAddContactForm.propTypes = {\n  onSubmit: PropTypes.func,\n};\nexport default AddContactForm;\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Helmet } from 'react-helmet';\n\nimport { fetchContacts } from 'redux/operations';\nimport { selectIsLoading } from 'redux/selectors';\nimport ContactList from 'components/ContactList/ContactList';\nimport AddContactForm from 'components/AddContactForm/AddContactForm';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Helmet>\n        <title>Your contacts</title>\n      </Helmet>\n      <AddContactForm />\n      <div>{isLoading && 'Request in progress...'}</div>\n      <ContactList />\n    </>\n  );\n}\n"],"names":["selectContacts","state","contacts","items","selectIsLoading","isLoading","selectFilter","filter","ContactListItems","contact","dispatch","useDispatch","name","phone","type","onClick","id","deleteContact","List","styled","useSelector","visibleContacts","useMemo","toLowerCase","includes","map","ContactForm","LabelForm","useState","setName","setPhone","handleChange","evt","target","currentTarget","value","onSubmit","preventDefault","addContact","onChange","pattern","title","required","Button","variant","Contacts","useEffect","fetchContacts","Helmet"],"sourceRoot":""}